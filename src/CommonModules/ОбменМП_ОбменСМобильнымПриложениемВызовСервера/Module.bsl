 #Область СлужебныеПроцедурыИФункции

///////////////////
//Выгрузка начислений
///////////////////

Процедура ВыгрузитьНачисления() Экспорт //++

	УзлыВыборка = ПланыОбмена.ОбменМП_ОбменСМобильнымПриложением.Выбрать();
	Пока УзлыВыборка.Следующий() Цикл
		//@skip-check unknown-method-property
		Если УзлыВыборка.ЭтотУзел Или УзлыВыборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		УзелОбъект = УзлыВыборка.ПолучитьОбъект();
		
		ПараметрыВыгрузки = Новый Структура("НачалоПериода, КонецПериода");
		ПараметрыВыгрузки.НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), УзлыВыборка.ГлубинаМесяцев));
		ПараметрыВыгрузки.КонецПериода = НачалоМесяца(ТекущаяДатаСеанса()); 
		
		НастройкиОбмена = ОбменМП_СлужебныйВызовСервера.ПолучитьНастройкиОбмена();
		НастройкиОбмена.Вставить("НомерОтправленного", УзлыВыборка.НомерОтправленного);
		НастройкиОбмена.Вставить("НомерПринятого", УзлыВыборка.НомерПринятого);
		НастройкиОбмена.Вставить("ИД", УзлыВыборка.ИД);

		МассивЗданийДляВыгрузки = УзлыВыборка.Здания.ВыгрузитьКолонку("УникальныйИдентификатор");
		ТаблицаРазрешенныхЗданийПомесячно = ОбменМП_СлужебныйВызовСервера.ПолучитьРазрешенныеЗдания(
			МассивЗданийДляВыгрузки, ПараметрыВыгрузки); 
		
		//@skip-check query-in-loop
		ВыборкаСобственниковПомещений = ПолучитьСобственниковПомещений(МассивЗданийДляВыгрузки, НастройкиОбмена);
		
		ЗаписьXML = СформироватьПакетИнформацииОСобственниках(ВыборкаСобственниковПомещений, НастройкиОбмена);
		
		УзелОбъект.ОтправитьДанные(ЗаписьXML);
		УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;
		УзелОбъект.Записать();
		
		ЗаписьXML = "";		
		НастройкиОбмена.Вставить("НомерОтправленного", УзелОбъект.НомерОтправленного);
		
		//Начало выгрузки начислений
		
		//@skip-check query-in-loop
		ПомесячнаяВыборкаНачислений = ПолучитьВыборкуНачислений(ТаблицаРазрешенныхЗданийПомесячно,
																ПараметрыВыгрузки, НастройкиОбмена);
		//Помесячный обход на глубину выгрузки
		ПомесячнаяВыборкаНачислений.Сбросить();
		
		Пока ПомесячнаяВыборкаНачислений.Следующий() цикл
			
			МесяцВыгрузки = ПомесячнаяВыборкаНачислений.Период;
			
			Если ТипЗнч(МесяцВыгрузки) = Тип("Дата") Тогда
				
				ВыборкаНачисленийПоЛицевымСчетам = ПомесячнаяВыборкаНачислений.Выбрать();
				
				ЗаписьXML = СформироватьПакетИнформацииОНачислениях(ВыборкаНачисленийПоЛицевымСчетам,
					НастройкиОбмена, МесяцВыгрузки);

				УзелОбъект.ОтправитьДанные(ЗаписьXML);
				УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;
				УзелОбъект.Записать();

				ЗаписьXML = "";
				НастройкиОбмена.Вставить("НомерОтправленного", УзелОбъект.НомерОтправленного);

			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСобственниковПомещений(Здания, НастройкиОбмена) //++
	
	ПВХДляМодуля = ПланыВидовХарактеристик.ОбменМП_НастройкиОбмена.НаименованиеОбщегоМодуля;
	НаименованиеОбщегоМодуля = НастройкиОбмена.Получить(ПВХДляМодуля);
	
	ПВХДляСправочника = ПланыВидовХарактеристик.ОбменМП_НастройкиОбмена.НаименованиеМетаданных;
	НаименованиеСправочника = НастройкиОбмена.Получить(ПВХДляСправочника);
	
	Если НаименованиеОбщегоМодуля = Неопределено или НаименованиеОбщегоМодуля = "" тогда
		СтрокаЖурнала = "Общий модуль для формирования запросов не найден!";
		ЗаписьЖурналаРегистрации(СтрокаЖурнала);
		Возврат Неопределено;
	ИначеЕсли Не НаименованиеСправочника = Неопределено или НаименованиеСправочника = "" тогда
		
		СписокЗданий = Новый СписокЗначений;
		Для каждого ЗданиеУникальныйИдентификатор из Здания цикл
			ЗданиеСсылка = Справочники[НаименованиеСправочника].ПолучитьСсылку(ЗданиеУникальныйИдентификатор);
			СписокЗданий.Добавить(ЗданиеСсылка);
		КонецЦикла;
		
		МодульВыгрузки = ОбщегоНазначения.ОбщийМодуль(НаименованиеОбщегоМодуля);		
		ВыборкаСобственников = МодульВыгрузки.ПолучитьСобственниковПомещений(СписокЗданий);
	КонецЕсли;
	
	Возврат ВыборкаСобственников;

КонецФункции
	
Функция ПолучитьВыборкуНачислений(ТаблицаРазрешенныхЗданийПомесячно, ПараметрыВыгрузки, НастройкиОбмена) //++
	
	ПВХДляПоиска = ПланыВидовХарактеристик.ОбменМП_НастройкиОбмена.НаименованиеОбщегоМодуля;
	НаименованиеОбщегоМодуля = НастройкиОбмена.Получить(ПВХДляПоиска);
	
	Если НаименованиеОбщегоМодуля = Неопределено или НаименованиеОбщегоМодуля = "" тогда
		СтрокаЖурнала = "Общий модуль для формирования запросов не найден!";
		ЗаписьЖурналаРегистрации(СтрокаЖурнала);
		Возврат Неопределено;
	Иначе
		МодульВыгрузки = ОбщегоНазначения.ОбщийМодуль(НаименованиеОбщегоМодуля);
		ВыборкаНачислений = МодульВыгрузки.ПолучитьВыборкуНачислений(ТаблицаРазрешенныхЗданийПомесячно, ПараметрыВыгрузки, НастройкиОбмена);
	КонецЕсли;
	
	Возврат ВыборкаНачислений;

КонецФункции

Функция СформироватьПакетИнформацииОСобственниках(РезультатЗапроса, ПараметрыОбмена)
	
	Body = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Body");
	Partners = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Partners");
	Accounts = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Accounts");
	PartnerAccounts = ФабрикаXDTO.Создать("http://www.skylab.ru/", "PartnerAccounts");
	CalcKinds = ФабрикаXDTO.Создать("http://www.skylab.ru/", "CalcKinds");
	Calcs = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Calcs");
	Buildings = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Buildings");
	ApartmentTypes = ФабрикаXDTO.Создать("http://www.skylab.ru/", "ApartmentTypes");
	Apartments = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Apartments");
	Receipts = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Receipts");
	PayIDS = ФабрикаXDTO.Создать("http://www.skylab.ru/", "PayIDS");
	AccrualTypes = ФабрикаXDTO.Создать("http://www.skylab.ru/", "AccrualTypes");
	CounterTariffValues = ФабрикаXDTO.Создать("http://www.skylab.ru/", "CounterTariffValues");

	КэшСобственников = Новый СписокЗначений;
	КэшЛицевыхСчетов = Новый СписокЗначений;

	КэшЗданий = Новый СписокЗначений;
	КэшПомещений = Новый СписокЗначений;
	КэшТиповПомещений = Новый СписокЗначений;

	ПВХДляОтбора = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
		"Общая площадь лицевого счета");
	ОтборПоСвойству = Новый Структура("Свойство", ПВХДляОтбора);
	ПлощадиПомещений = РегистрыСведений.ркЗначенияПериодическихСвойствОбъектов.СрезПоследних( , ОтборПоСвойству);
				
		//Информация для платных услуг
	ОтборМП = Новый Структура("УслугаМП");
	ОтборМП.УслугаМП = Истина;

	ВыборкаНачисленийПлатныхУслуг = Справочники.ркВидыРасчетов.Выбрать(,ОтборМП);
	Пока ВыборкаНачисленийПлатныхУслуг.Следующий() Цикл
		Объект = ВыборкаНачисленийПлатныхУслуг.ПолучитьОбъект();
		AccrualType = ФабрикаXDTO.Создать("http://www.skylab.ru/", "AccrualType");
		AccrualType.ID = Строка(Объект.Ссылка.УникальныйИдентификатор());
		AccrualType.Name = Объект.Наименование;
		AccrualTypes.AccrualType.Добавить(AccrualType);
	КонецЦикла;

	ЗапросВыборка = РезультатЗапроса.Выбрать();
	Пока ЗапросВыборка.Следующий() Цикл

		Собственник = ЗапросВыборка.Собственник;
		ЛицевойСчет = ЗапросВыборка.ЛицевойСчет;

		Здание = ЛицевойСчет.Дом;
		Если КэшЗданий.НайтиПоЗначению(Здание) = Неопределено Тогда

			Building = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Building");

			Building.ID = Строка(Здание.УникальныйИдентификатор());
			Building.Name = Здание.Наименование;
			Building.PaidService = Ложь;

			Buildings.Building.Добавить(Building);

			КэшЗданий.Добавить(Здание);

		КонецЕсли;

		ТипПомещения = ЛицевойСчет.Помещение.Тип;
		Если КэшТиповПомещений.НайтиПоЗначению(ТипПомещения) = Неопределено Тогда

			ApartmentType = ФабрикаXDTO.Создать("http://www.skylab.ru/", "ApartmentType");

			ApartmentType.ID = Строка(ТипПомещения.УникальныйИдентификатор());
			ApartmentType.Name = ТипПомещения.Наименование;

			ApartmentTypes.ApartmentType.Добавить(ApartmentType);

			КэшТиповПомещений.Добавить(ТипПомещения);

		КонецЕсли;

		Помещение = ЛицевойСчет.Помещение;
		Если КэшПомещений.НайтиПоЗначению(Помещение) = Неопределено Тогда

			Apartment = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Apartment");

			Apartment.ID = Строка(Помещение.УникальныйИдентификатор());
			Apartment.Name = Помещение.Наименование;
			Apartment.Number = Строка(Помещение.Номер);
			Apartment.BuildingID = Строка(Здание.УникальныйИдентификатор());
			Apartment.TypeID = Строка(ТипПомещения.УникальныйИдентификатор());
			Apartment.Porch = Строка(ЗапросВыборка.Подъезд);
			Apartment.Floor = Строка(ЗапросВыборка.Этаж);
			Apartment.Rooms = Строка(ЗапросВыборка.КоличествоКомнат);

			Площадь = 0;
			ПлощадьСтрока = ПлощадиПомещений.Найти(Помещение, "Объект");
			Если Не ПлощадьСтрока = Неопределено Тогда
				Площадь = ПлощадьСтрока.Площадь;
			КонецЕсли;

			Apartment.Area = Площадь;
				
				//РезультатСобственников = КоличествоСобственников(Помещение);
				//ЗапросСобственников = РезультатСобственников.Выбрать();
				//Если ЗапросСобственников.Следующий() Тогда
				//	Apartment.Owners = ЗапросСобственников.Количество;	
				//Иначе
				//	Apartment.Owners = 0;	
				//КонецЕсли;
			Apartment.Owners = 0;

			КоличествоЖителей = ЗапросВыборка.КоличествоЖителей;
			Apartment.Living = КоличествоЖителей;

			Apartments.Apartment.Добавить(Apartment);

			КэшПомещений.Добавить(Помещение);

		КонецЕсли;

		Если ТипЗнч(Собственник) = Тип("СправочникСсылка.Контрагенты") Тогда
			СобственникФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		ИначеЕсли ТипЗнч(Собственник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СобственникФизЛицо = Собственник;
		Иначе
			СобственникФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
			
		// номер телефона ответственного			
		НомерТелефона = "";
		Если ЗначениеЗаполнено(СобственникФизЛицо) И Не ПустаяСтрока(СобственникФизЛицо.ОбменМП_idMobApp) Тогда
			НомерТелефона = СтрЗаменить(СобственникФизЛицо.ОбменМП_idMobApp, "-", "");
		КонецЕсли;
		
		Partner = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Partner");

		Если ЗначениеЗаполнено(СобственникФизЛицо) Тогда
			ФИО = СобственникФизЛицо.ФИО;
			Если СобственникФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				Пол = "MALE";
			ИначеЕсли СобственникФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				Пол = "FEMALE";
			Иначе
				Пол = "UNKNOWN";
			КонецЕсли;
			ДатаРождения = СобственникФизЛицо.ДатаРождения;
		Иначе
			ФИО = Собственник.Наименование;
			Пол = "UNKNOWN";
			ДатаРождения = Дата("00010101");
		КонецЕсли;
					
			// собственники
		Если КэшСобственников.НайтиПоЗначению(СобственникФизЛицо) = Неопределено Тогда
			Partner = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Partner");

			Partner.ID = Строка(СобственникФизЛицо.УникальныйИдентификатор());
			Partner.Name = ФИО;
			Partner.Gender = Пол;
			Partner.Birthday = ДатаРождения;
			Partner.Phone = НомерТелефона;

			Partners.Partner.Добавить(Partner);

			КэшСобственников.Добавить(СобственникФизЛицо);
		КонецЕсли;
			
			// лицевые счета
		Если КэшЛицевыхСчетов.НайтиПоЗначению(ЛицевойСчет) = Неопределено Тогда
			Account = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Account");

			Account.ID = Строка(ЛицевойСчет.УникальныйИдентификатор());
			Account.Description = СокрЛП(ЛицевойСчет.Наименование);
			Account.Number = СокрЛП(ЛицевойСчет.Код);
			Account.ExternalNumber = "";
			Account.ApartmentID = Строка(Помещение.УникальныйИдентификатор());
			Account.Active = Не ЗначениеЗаполнено(ЗапросВыборка.ДатаЗакрытия) Или ЗапросВыборка.ДатаЗакрытия
				> НачалоДня(ТекущаяДатаСеанса());

			Accounts.Account.Добавить(Account);

			КэшЛицевыхСчетов.Добавить(ЛицевойСчет);
		КонецЕсли;
			
			// лицевые счета собственников
		PartnerAccount = ФабрикаXDTO.Создать("http://www.skylab.ru/", "PartnerAccount");

		PartnerAccount.PartnerID = Строка(СобственникФизЛицо.УникальныйИдентификатор());
		PartnerAccount.AccountID = Строка(ЛицевойСчет.УникальныйИдентификатор());
		Если ЗапросВыборка.ВсегоДолей = 0 Тогда
			PartnerAccount.ShareOwnership = 0;
		Иначе
			PartnerAccount.ShareOwnership = ЗапросВыборка.ЧислоДолей / ЗапросВыборка.ВсегоДолей;
		КонецЕсли;

		PartnerAccounts.PartnerAccount.Добавить(PartnerAccount);

	КонецЦикла;

	Body.Partners = Partners;
	Body.Accounts = Accounts;
	Body.PartnerAccounts = PartnerAccounts;
	Body.CalcKinds = CalcKinds;
	Body.Calcs = Calcs;
	Body.Buildings = Buildings;
	Body.ApartmentTypes = ApartmentTypes;
	Body.Apartments = Apartments;
	Body.AccrualTypes = AccrualTypes;
	Body.CounterTariffValues = CounterTariffValues;
	Body.Receipts = Receipts;
	Body.PayIDS = PayIDS;
	
	Root = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Root");
	
	Header = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Header");
	Header.PackageNumber = Число(ПараметрыОбмена.Получить("НомерОтправленного")) + 1;
	Header.PackageNumberAccepted = Число(ПараметрыОбмена.Получить("НомерПринятого"));
	Header.ID = ПараметрыОбмена.Получить("ИД");
	
	Root.Header = Header;
	Root.Body = Body;
	
	ПараметрыЗаписи = новый ПараметрыЗаписиXML(,, ложь);
	
	ЗаписьXML = новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Root);
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;	
		
КонецФункции

Функция СформироватьПакетИнформацииОНачислениях(ВыборкаНачислений, ПараметрыОбмена, МесяцВыгрузки)
	
	Body = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Body");
	Partners = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Partners");
	Accounts = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Accounts");
	PartnerAccounts = ФабрикаXDTO.Создать("http://www.skylab.ru/", "PartnerAccounts");
	CalcKinds = ФабрикаXDTO.Создать("http://www.skylab.ru/", "CalcKinds");
	Calcs = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Calcs");
	Buildings = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Buildings");
	ApartmentTypes = ФабрикаXDTO.Создать("http://www.skylab.ru/", "ApartmentTypes");
	Apartments = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Apartments");
	Receipts = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Receipts");
	PayIDS = ФабрикаXDTO.Создать("http://www.skylab.ru/", "PayIDS");
	AccrualTypes = ФабрикаXDTO.Создать("http://www.skylab.ru/", "AccrualTypes");
	CounterTariffValues = ФабрикаXDTO.Создать("http://www.skylab.ru/", "CounterTariffValues");
	
	КэшВидовНачислений = Новый СписокЗначений;
	КэшЛицевыхСчетовДляНачислений = Новый СписокЗначений;
	
	МенеджерРегистраФиктивныхОплат = РегистрыСведений.ОбменМП_ИдентификаторыПлатежей;
	НаборФиктивныхОплат = МенеджерРегистраФиктивныхОплат.СоздатьНаборЗаписей();
	НаборФиктивныхОплат.Отбор.Период.Установить(МесяцВыгрузки);
	НаборФиктивныхОплат.Прочитать();
	
	Для каждого ФиктивнаяОплата из НаборФиктивныхОплат Цикл

		PayID = ФабрикаXDTO.Создать("http://www.skylab.ru/", "PayID");

		PayID.ID = Строка(ФиктивнаяОплата.Идентификатор);
		PayIDS.PayID.Добавить(PayID);

	КонецЦикла;

	ВыборкаНачислений.Сбросить();
	Пока ВыборкаНачислений.Следующий() Цикл

		ЛицевойСчет = ВыборкаНачислений.ЛицевойСчет;
		Если КэшЛицевыхСчетовДляНачислений.НайтиПоЗначению(ЛицевойСчет) = Неопределено Тогда
			КэшЛицевыхСчетовДляНачислений.Добавить(ЛицевойСчет);
		КонецЕсли;

		ВидНачисления = ВыборкаНачислений.ВидНачисления;
			
			// виды начислений
		Если КэшВидовНачислений.Количество() = 0 Тогда
			ВидНачисленияОстаток = Справочники.ркВидыРасчетов.НайтиПоНаименованию("Остаток");
			КэшВидовНачислений.Добавить(ВидНачисленияОстаток);

			CalcKind = ФабрикаXDTO.Создать("http://www.skylab.ru/", "CalcKind");

			CalcKind.ID = Строка(ВидНачисленияОстаток.УникальныйИдентификатор());
			CalcKind.Name = "Остаток";
			CalcKind.Unit = "руб.";

			CalcKinds.CalcKind.Добавить(CalcKind);

		КонецЕсли;
		Если КэшВидовНачислений.НайтиПоЗначению(ВидНачисления) = Неопределено Тогда

			КэшВидовНачислений.Добавить(ВидНачисления);

			CalcKind = ФабрикаXDTO.Создать("http://www.skylab.ru/", "CalcKind");

			CalcKind.ID = Строка(ВидНачисления.УникальныйИдентификатор());
			CalcKind.Name = ВидНачисления.Наименование;
			CalcKind.Unit = Строка(ВыборкаНачислений.ЕдиницаИзмерения);

			CalcKinds.CalcKind.Добавить(CalcKind);

		КонецЕсли;

		Calc = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Calc");
		Calc.Period = МесяцВыгрузки;
		Calc.AccountID = Строка(ЛицевойСчет.УникальныйИдентификатор());
		Calc.CalcKindID = Строка(ВидНачисления.УникальныйИдентификатор());
		Calc.Debit = ВыборкаНачислений.Оплачено;
		Calc.BalanceBegin = 0;
		Calc.BalanceEnd = 0;
		Calc.Credit = ВыборкаНачислений.Начислено;
		Calc.BalanceBegin = ВыборкаНачислений.НачальныйОстаток;
		Calc.BalanceEnd = ВыборкаНачислений.КонечныйОстаток;
		Calc.Quantity = ВыборкаНачислений.Количество;

		Calcs.Calc.Добавить(Calc);

	КонецЦикла; // записи


	Body.Partners = Partners;
	Body.Accounts = Accounts;
	Body.PartnerAccounts = PartnerAccounts;
	Body.CalcKinds = CalcKinds;
	Body.Calcs = Calcs;
	Body.Buildings = Buildings;
	Body.ApartmentTypes = ApartmentTypes;
	Body.Apartments = Apartments;
	Body.AccrualTypes = AccrualTypes;
	Body.CounterTariffValues = CounterTariffValues;
	Body.Receipts = Receipts;
	Body.PayIDS = PayIDS;

	Root = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Root");

	Header = ФабрикаXDTO.Создать("http://www.skylab.ru/", "Header");
	Header.PackageNumber = Число(ПараметрыОбмена.Получить("НомерОтправленного")) + 1;
	Header.PackageNumberAccepted = Число(ПараметрыОбмена.Получить("НомерПринятого"));
	Header.ID = ПараметрыОбмена.Получить("ИД");

	Root.Header = Header;
	Root.Body = Body;

	ПараметрыЗаписи = Новый ПараметрыЗаписиXML(, , Ложь);

	ЗаписьXML = Новый ЗаписьXML;

	ЗаписьXML.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Root);
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
		
КонецФункции

///////////////////
//Загрузка оплат
///////////////////

Процедура ЗагрузитьОплатыИзПочты() экспорт
	
	НастройкиОбмена = ОбменМП_СлужебныйВызовСервера.ПолучитьНастройкиОбмена();
	ПВХДатаПоследнегоФайлаОплат = ПланыВидовХарактеристик.ОбменМП_НастройкиОбмена.ДатаПоследнегоФайлаОплат;
	ДатаПоследнегоФайлаСОплатами = НастройкиОбмена.Получить(ПВХДатаПоследнегоФайлаОплат);
	
	ПВХНаименованиеОбщегоМодуля = ПланыВидовХарактеристик.ОбменМП_НастройкиОбмена.НаименованиеОбщегоМодуля;
	НаименованиеОбщегоМодуля = НастройкиОбмена.Получить(ПВХНаименованиеОбщегоМодуля);
	
	Если ДатаПоследнегоФайлаСОплатами = Неопределено или НаименованиеОбщегоМодуля = Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль(НаименованиеОбщегоМодуля);
	Если ТипЗнч(ОбщийМодуль) <> Тип("ОбщийМодуль") тогда
		СтрокаЖурнала = "Не найден общий модуль!";
		ЗаписьЖурналаРегистрации(СтрокаЖурнала);
		Возврат;
	КонецЕсли;
	
	КэшФайловОплат = Новый СписокЗначений;
	ВыборкаФайловОплат = РегистрыСведений.ОбменМП_ИменаЗагруженныхФайловОплат.Выбрать();
	Пока ВыборкаФайловОплат.Следующий() цикл
		КэшФайловОплат.Добавить(ВыборкаФайловОплат.ИмяФайла);
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	ПочтовыйПрофиль.АдресСервераIMAP = "imap.yandex.ru";
	ПочтовыйПрофиль.ПортIMAP = 993;
	ПочтовыйПрофиль.Пользователь = "good.1c@poleznosoft.ru";
	ПочтовыйПрофиль.ПользовательIMAP = "good.1c@poleznosoft.ru";
	ПочтовыйПрофиль.Пароль = "bvrlakkbspbcjlfv";
	ПочтовыйПрофиль.ПарольIMAP = "bvrlakkbspbcjlfv"; //ifjqybwlfhkbomql
	ПочтовыйПрофиль.ИспользоватьSSLIMAP = Истина;
	Почта.Подключиться(ПочтовыйПрофиль,ПротоколИнтернетПочты.IMAP);
	МассивПочтовыхСообщений = Почта.Выбрать(Ложь,,Истина);
	
	ТаблицаПисем = Новый ТаблицаЗначений;
	ТаблицаПисем.Колонки.Добавить("ДатаОтправления");
	ТаблицаПисем.Колонки.Добавить("Вложения");
	ТаблицаПисем.Колонки.Добавить("Тема");
	Для Каждого Строка Из МассивПочтовыхСообщений Цикл
		СтрокаТаблицы = ТаблицаПисем.Добавить();
		СтрокаТаблицы.ДатаОтправления = Строка.ДатаОтправления;
		СтрокаТаблицы.Вложения = Строка.Вложения;
		СтрокаТаблицы.Тема = Строка.Тема;
	КонецЦикла;
	ТаблицаПисем.Сортировать("ДатаОтправления");
		
	Для Каждого Строка Из ТаблицаПисем Цикл
		Если Строка.ДатаОтправления >= ДатаПоследнегоФайлаСОплатами Тогда
			//НачатьТранзакцию();
			Для Каждого Вложения Из Строка.Вложения	Цикл
				
				Если КэшФайловОплат.НайтиПоЗначению(Вложения.ИмяФайла) = Неопределено Тогда
					Если Прав(Вложения.ИмяФайла, 4) <> ".csv" тогда
						СтрокаЖурнала = "Проигнорировано вложение с некорректным расширением";
						ЗаписьЖурналаРегистрации(СтрокаЖурнала);
						Продолжить;
					КонецЕсли;
					
					ТаблицаОплат = Новый ТаблицаЗначений;
					ТаблицаОплат.Колонки.Добавить("НомерСчета");
					ТаблицаОплат.Колонки.Добавить("Сумма");
					ТаблицаОплат.Колонки.Добавить("Идентификатор");
					ТаблицаОплат.Колонки.Добавить("ДатаПлатежа");
					ТаблицаОплат.Колонки.Добавить("ДокументОплаты");
					
					ВременныйФайл = ПолучитьИмяВременногоФайла("csv");	
					Вложения.Данные.Записать(ВременныйФайл);
					
					//Начало чтения
					ЧтениеВложения = Новый ТекстовыйДокумент;
					ЧтениеВложения.Прочитать(ВременныйФайл);
					
					Разделитель = ";";
					Для НомерСтроки=1 по ЧтениеВложения.КоличествоСтрок() Цикл
						Строка = ЧтениеВложения.ПолучитьСтроку(НомерСтроки);
						МассивКолонок = СтрРазделить(Строка,Разделитель);

						НоваяОплата = ТаблицаОплат.Добавить();
						НоваяОплата.НомерСчета = МассивКолонок.Получить(6);
						НоваяОплата.Сумма = МассивКолонок.Получить(7);
						НоваяОплата.ID = МассивКолонок.Получить(8);
						НоваяОплата.ДатаПлатежа = СтроковыеФункцииКлиентСервер.СтрокаВДату(СокрЛП(МассивКолонок.Получить(1)));
					КонецЦикла;
					
					УдалитьФайлы(ВременныйФайл);
					//Конец чтения
			
					//Здесь же заполняются уникальные идентификаторы для регистра "Идентификаторы оплат"
					ОбщийМодуль.СоздатьИЗаполнитьДокументыОплат(ТаблицаОплат);					
					
					ЗаписатьИдентификаторыПлатежей(ТаблицаОплат);
					
					ФайлВложения = РегистрыСведений.ОбменМП_ИменаЗагруженныхФайловОплат.СоздатьМенеджерЗаписи();
					ФайлВложения.ИмяФайла = Вложения.ИмяФайла;
					ФайлВложения.Записать();
					
					КэшФайловОплат.Добавить(Вложения.ИмяФайла);
				Иначе
					//Файл найден по наименованию в регистре загруженых 
				КонецЕсли;
				
			КонецЦикла;
			ДатаПоследнегоФайлаСОплатами = Строка.ДатаОтправления;			
			//ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	
	ПВХДатаПоследнегФайлаОплат = ПланыВидовХарактеристик.ОбменМП_НастройкиОбмена.ДатаПоследнегоФайлаОплат;
	ОбменМП_СлужебныйВызовСервера.ЗаписатьНастройкиОбмена(ПВХДатаПоследнегФайлаОплат, ДатаПоследнегоФайлаСОплатами);
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторыПлатежей(ТаблицаОплат)
	
	НаборЗаписей = РегистрыСведений.ОбменМП_ИдентификаторыПлатежей.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Платеж из ТаблицаОплат цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДатаПлатежа = Платеж.ДатаПлатежа;
		НоваяЗапись.Идентификатор = Платеж.Идентификатор;
		НоваяЗапись.НомерСчета = Платеж.НомерСчета;
		НоваяЗапись.Сумма = ТаблицаОплат.Сумма;
		НоваяЗапись.ИдентификаторДокумента = Платеж.ДокументОплаты;
			
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);	
		
КонецПроцедуры
#КонецОбласти